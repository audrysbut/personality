{"version":3,"sources":["data/cognitive-funcion-data.ts","components/cognitive-function-table/cognitive-function-table.tsx","data/cognitive-function-roles.ts","pages/cognitive-functions/cognitive-functions-page.tsx","navigation/navigation.tsx","pages/comparison/cognitive-function-view.tsx","pages/comparison/cell.tsx","pages/comparison/personality-detail-title.tsx","pages/comparison/personality-detail.tsx","pages/comparison/segment.tsx","pages/comparison/personality-type-selector.tsx","pages/comparison/comparison-page.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CognitiveFunctionType","row","width","border","borderRadius","padding","activeRow","background","mainRow","fontWeight","mainColumn","TableTitle","title","style","CognitiveFunctionTable","personalities","state","useState","types","map","p","type","heroes","personality","hero","parents","parent","children","child","nemesis","inferiors","inferior","critics","critic","tricksters","trickster","demons","demon","nemesi","tricster","paddingRight","textAlign","paddingLeft","Cell","setState","onMouseOver","onMouseOut","CogntiveFunctionPosition","Ni","Si","Ti","Fi","Ne","Se","Te","Fe","intj","entj","estj","enfj","esfj","enfp","entp","esfp","estp","infj","istj","isfj","intp","istp","infp","isfp","introverts","extraverts","CognitiveFunctionPage","NavigationBar","to","data","cognitiveFunctionType","traits","rowStyle","borderRight","CognitiveFunctionView","borderBottom","borderTop","borderCollapse","undefined","activeTypeState","selectedTypesState","activeType","setActiveType","selectedTypes","setSelectedTypes","isActive","selected","includes","onClick","contains","prev","filter","t","getPersonalityTypeColor","height","userSelect","lineHeight","intuitive","sensor","thinker","feeler","judger","perceiver","PersonalityDetailTitle","PersonalityDetail","marginRight","paddingBottom","overflow","CognitiveFunctionDescriptions","cognitiveFunction","position","SingleCognitiveFunction","records","length","getCognitiveFunctionData","color","traitsView","Segment","type1","type2","type3","type4","titles","PersonalityTypeSelector","inTypes","isTypes","enTypes","esTypes","ComparisonPage","detailComponents","App","basename","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.444073a4.chunk.js","sourcesContent":["export enum CognitiveFunctionType {\n  Ni = 'Ni',\n  Ne = 'Ne',\n  Ti = 'Ti',\n  Te = 'Te',\n  Si = 'Si',\n  Se = 'Se',\n  Fi = 'Fi',\n  Fe = 'Fe',\n}\n\nexport const Ni = CognitiveFunctionType.Ni;\nexport const Si = CognitiveFunctionType.Si;\nexport const Ti = CognitiveFunctionType.Ti;\nexport const Fi = CognitiveFunctionType.Fi;\n\nexport const Ne = CognitiveFunctionType.Ne;\nexport const Se = CognitiveFunctionType.Se;\nexport const Te = CognitiveFunctionType.Te;\nexport const Fe = CognitiveFunctionType.Fe;\n\nexport type PersonalityType =\n  | 'INFJ'\n  | 'INTJ'\n  | 'ENTJ'\n  | 'ESTJ'\n  | 'ENFJ'\n  | 'ESFJ'\n  | 'ENFP'\n  | 'ENTP'\n  | 'ESFP'\n  | 'ESTP'\n  | 'ISTJ'\n  | 'ISFJ'\n  | 'INTP'\n  | 'ISTP'\n  | 'INFP'\n  | 'ISFP';\n\nexport interface Personality {\n  type: PersonalityType;\n  hero: CognitiveFunctionType;\n  parent: CognitiveFunctionType;\n  child: CognitiveFunctionType;\n  inferior: CognitiveFunctionType;\n  nemesis: CognitiveFunctionType;\n  critic: CognitiveFunctionType;\n  trickster: CognitiveFunctionType;\n  demon: CognitiveFunctionType;\n}\n\nexport const intj: Personality = {\n  type: 'INTJ',\n  hero: Ni,\n  parent: Te,\n  child: Fi,\n  nemesis: Ne,\n  inferior: Se,\n  critic: Ti,\n  trickster: Fe,\n  demon: Si,\n};\n\nexport const entj: Personality = {\n  type: 'ENTJ',\n  hero: Te,\n  parent: Ni,\n  child: Se,\n  nemesis: Ti,\n  inferior: Fi,\n  critic: Ne,\n  trickster: Si,\n  demon: Fe,\n};\n\nexport const estj: Personality = {\n  type: 'ESTJ',\n  hero: Te,\n  parent: Si,\n  child: Ne,\n  nemesis: Ti,\n  inferior: Fi,\n  critic: Se,\n  trickster: Ni,\n  demon: Fe,\n};\n\nexport const enfj: Personality = {\n  type: 'ENFJ',\n  hero: Fe,\n  parent: Ni,\n  child: Se,\n  nemesis: Fi,\n  inferior: Ti,\n  critic: Ne,\n  trickster: Si,\n  demon: Te,\n};\n\nexport const esfj: Personality = {\n  type: 'ESFJ',\n  hero: Fe,\n  parent: Si,\n  child: Ne,\n  nemesis: Fi,\n  inferior: Ti,\n  critic: Se,\n  trickster: Ni,\n  demon: Te,\n};\n\nexport const enfp: Personality = {\n  type: 'ENFP',\n  hero: Ne,\n  parent: Fi,\n  child: Te,\n  nemesis: Ni,\n  inferior: Si,\n  critic: Fe,\n  trickster: Ti,\n  demon: Se,\n};\n\nexport const entp: Personality = {\n  type: 'ENTP',\n  hero: Ne,\n  parent: Ti,\n  child: Fe,\n  nemesis: Ni,\n  inferior: Si,\n  critic: Te,\n  trickster: Fi,\n  demon: Se,\n};\n\nexport const esfp: Personality = {\n  type: 'ESFP',\n  hero: Se,\n  parent: Fi,\n  child: Te,\n  nemesis: Si,\n  inferior: Ni,\n  critic: Fe,\n  trickster: Ti,\n  demon: Ne,\n};\n\nexport const estp: Personality = {\n  type: 'ESTP',\n  hero: Se,\n  parent: Ti,\n  child: Fe,\n  nemesis: Si,\n  inferior: Ni,\n  critic: Te,\n  trickster: Fi,\n  demon: Ne,\n};\n\nexport const infj: Personality = {\n  type: 'INFJ',\n  hero: Ni,\n  parent: Fe,\n  child: Ti,\n  nemesis: Ne,\n  inferior: Se,\n  critic: Fi,\n  trickster: Te,\n  demon: Si,\n};\n\nexport const istj: Personality = {\n  type: 'ISTJ',\n  hero: Si,\n  parent: Te,\n  child: Fi,\n  nemesis: Se,\n  inferior: Ne,\n  critic: Ti,\n  trickster: Fe,\n  demon: Ni,\n};\n\nexport const isfj: Personality = {\n  type: 'ISFJ',\n  hero: Si,\n  parent: Fe,\n  child: Ti,\n  nemesis: Se,\n  inferior: Ne,\n  critic: Fi,\n  trickster: Te,\n  demon: Ni,\n};\n\nexport const intp: Personality = {\n  type: 'INTP',\n  hero: Ti,\n  parent: Ne,\n  child: Si,\n  nemesis: Te,\n  inferior: Fe,\n  critic: Ni,\n  trickster: Se,\n  demon: Fi,\n};\n\nexport const istp: Personality = {\n  type: 'ISTP',\n  hero: Ti,\n  parent: Se,\n  child: Ni,\n  nemesis: Te,\n  inferior: Fe,\n  critic: Si,\n  trickster: Ne,\n  demon: Fi,\n};\n\nexport const infp: Personality = {\n  type: 'INFP',\n  hero: Fi,\n  parent: Ne,\n  child: Si,\n  nemesis: Fe,\n  inferior: Te,\n  critic: Ni,\n  trickster: Se,\n  demon: Ti,\n};\n\nexport const isfp: Personality = {\n  type: 'ISFP',\n  hero: Fi,\n  parent: Se,\n  child: Ni,\n  nemesis: Fe,\n  inferior: Te,\n  critic: Si,\n  trickster: Ne,\n  demon: Ti,\n};\n","import React, { CSSProperties, useState } from 'react';\nimport { Personality } from '../../data/cognitive-funcion-data';\n\ninterface CognitiveFunctionTableProps {\n  title: string;\n  personalities: Personality[];\n}\n\nconst row: CSSProperties = {\n  width: '70px',\n  border: '1px solid black',\n  borderRadius: '3px',\n  padding: '10px',\n};\n\nconst activeRow: CSSProperties = {\n  width: '70px',\n  border: '1px solid black',\n  borderRadius: '3px',\n  padding: '10px',\n  background: 'lightblue',\n};\n\nconst mainRow: CSSProperties = {\n  background: 'lightgreen',\n  fontWeight: 'bold',\n};\n\nconst mainColumn: CSSProperties = {\n  background: 'lightgreen',\n};\n\ninterface TableTitleProps {\n  title: string;\n}\nconst TableTitle = ({ title }: TableTitleProps) => {\n  return <td style={{ ...row, ...mainColumn }}>{title}</td>;\n};\n\nexport const CognitiveFunctionTable = ({\n  personalities,\n  title,\n}: CognitiveFunctionTableProps) => {\n  const state = useState('');\n  const types = personalities.map((p) => (\n    <td style={{ ...row, ...mainRow }}>{p.type}</td>\n  ));\n  const heroes = personalities.map((p) => (\n    <Cell personality={p} state={state} hero />\n  ));\n  const parents = personalities.map((p) => (\n    <Cell personality={p} state={state} parent />\n  ));\n  const children = personalities.map((p) => (\n    <Cell personality={p} state={state} child />\n  ));\n  const nemesis = personalities.map((p) => (\n    <Cell personality={p} state={state} nemesis />\n  ));\n  const inferiors = personalities.map((p) => (\n    <Cell personality={p} state={state} inferior />\n  ));\n  const critics = personalities.map((p) => (\n    <Cell personality={p} state={state} critic />\n  ));\n  const tricksters = personalities.map((p) => (\n    <Cell personality={p} state={state} trickster />\n  ));\n  const demons = personalities.map((p) => (\n    <Cell personality={p} state={state} demon />\n  ));\n\n  const type = <TableTitle title=\"Type:\" />;\n  const hero = <TableTitle title=\"Hero:\" />;\n  const parent = <TableTitle title=\"Parent:\" />;\n  const child = <TableTitle title=\"Child:\" />;\n  const nemesi = <TableTitle title=\"Nemesis:\" />;\n  const inferior = <TableTitle title=\"Inferior:\" />;\n  const critic = <TableTitle title=\"Critic:\" />;\n  const tricster = <TableTitle title=\"Trickster:\" />;\n  const demon = <TableTitle title=\"Demon:\" />;\n\n  return (\n    <div\n      style={{\n        paddingRight: '10px',\n      }}\n    >\n      <div\n        style={{ textAlign: 'left', paddingLeft: '10px', fontWeight: 'bold' }}\n      >\n        {title}\n      </div>\n      <table>\n        <tr>{[type, ...types]}</tr>\n        <tr>{[hero, ...heroes]}</tr>\n        <tr>{[parent, ...parents]}</tr>\n        <tr>{[child, ...children]}</tr>\n        <tr>{[inferior, ...inferiors]}</tr>\n        <tr>{[nemesi, ...nemesis]}</tr>\n        <tr>{[critic, ...critics]}</tr>\n        <tr>{[tricster, ...tricksters]}</tr>\n        <tr>{[demon, ...demons]}</tr>\n      </table>\n    </div>\n  );\n};\n\ninterface CellProperties {\n  personality: Personality;\n  state: [string, React.Dispatch<React.SetStateAction<string>>];\n  hero?: boolean;\n  parent?: boolean;\n  child?: boolean;\n  inferior?: boolean;\n  nemesis?: boolean;\n  critic?: boolean;\n  trickster?: boolean;\n  demon?: boolean;\n}\n\nconst Cell = (p: CellProperties) => {\n  const [state, setState] = p.state;\n  const isActive = p.personality.type === state;\n  const style = isActive ? activeRow : row;\n\n  const getTitle = () => {\n    if (p.hero) {\n      return p.personality.hero;\n    }\n    if (p.parent) {\n      return p.personality.parent;\n    }\n    if (p.child) {\n      return p.personality.child;\n    }\n    if (p.inferior) {\n      return p.personality.inferior;\n    }\n    if (p.nemesis) {\n      return p.personality.nemesis;\n    }\n    if (p.trickster) {\n      return p.personality.trickster;\n    }\n    if (p.critic) {\n      return p.personality.critic;\n    }\n    if (p.demon) {\n      return p.personality.demon;\n    }\n  };\n  const title = getTitle();\n  return (\n    <td\n      style={style}\n      onMouseOver={() => {\n        setState(p.personality.type);\n      }}\n      onMouseOut={() => {\n        setState('');\n      }}\n    >\n      {title}\n    </td>\n  );\n};\n","import {\n  CognitiveFunctionType,\n  Fe,\n  Fi,\n  Ne,\n  Ni,\n  Se,\n  Si,\n  Te,\n  Ti,\n} from './cognitive-funcion-data';\n\nexport enum CogntiveFunctionPosition {\n  hero = 'hero',\n  parent = 'parent',\n  child = 'child',\n  inferior = 'inferior',\n  nemesis = 'nemesis',\n  critic = 'critic',\n  trickster = 'trickster',\n  demon = 'demon',\n}\n\nexport const hero = CogntiveFunctionPosition.hero;\nexport const parent = CogntiveFunctionPosition.parent;\nexport const child = CogntiveFunctionPosition.child;\nexport const inferior = CogntiveFunctionPosition.inferior;\nexport const nemesis = CogntiveFunctionPosition.nemesis;\nexport const trickster = CogntiveFunctionPosition.trickster;\nexport const critic = CogntiveFunctionPosition.critic;\nexport const demon = CogntiveFunctionPosition.demon;\n\ninterface CognitiveFunctionData {\n  cognitiveFunctionType: CognitiveFunctionType;\n  traits: string[];\n}\n\nconst data: CognitiveFunctionData[] = [\n  {\n    cognitiveFunctionType: Si,\n    traits: [\n      'Long term memory',\n      'Conviction',\n      'Discipline',\n      'Past',\n      'Honor',\n      'Duty',\n    ],\n  },\n  {\n    cognitiveFunctionType: Se,\n    traits: ['Physics', 'Mechanics', 'Short term memory'],\n  },\n  {\n    cognitiveFunctionType: Fi,\n    traits: ['Morals', 'Principles'],\n  },\n  {\n    cognitiveFunctionType: Fe,\n    traits: ['Ethics', 'Feelings of others'],\n  },\n  {\n    cognitiveFunctionType: Ti,\n    traits: ['Logic'],\n  },\n  {\n    cognitiveFunctionType: Te,\n    traits: ['Rationale'],\n  },\n  {\n    cognitiveFunctionType: Ne,\n    traits: ['Metaphysics', 'Prescience', 'All futures'],\n  },\n  {\n    cognitiveFunctionType: Ni,\n    traits: ['Willpower', 'Own Future'],\n  },\n];\n\nexport function getCognitiveFunctionData(\n  cognitiveFunction: CognitiveFunctionType\n): CognitiveFunctionData | undefined {\n  const records = data.filter(\n    (t) => t.cognitiveFunctionType === cognitiveFunction\n  );\n  if (records.length > 0) {\n    return records[0];\n  }\n  return undefined;\n}\n","import React from 'react';\nimport { CognitiveFunctionTable } from '../../components/cognitive-function-table/cognitive-function-table';\nimport {\n  enfj,\n  enfp,\n  entj,\n  entp,\n  esfj,\n  esfp,\n  estj,\n  estp,\n  infj,\n  infp,\n  intj,\n  intp,\n  isfj,\n  isfp,\n  istj,\n  istp,\n} from '../../data/cognitive-funcion-data';\n\nconst introverts = [intj, infj, intp, infp, istj, isfj, istp, isfp];\n\nconst extraverts = [entj, enfj, entp, enfp, estj, esfj, estp, esfp];\n\nexport const CognitiveFunctionPage = () => {\n  return (\n    <div>\n      <CognitiveFunctionTable personalities={introverts} title=\"Introverts:\" />\n      <CognitiveFunctionTable personalities={extraverts} title=\"Extroverts:\" />\n    </div>\n  );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport const NavigationBar = () => {\n  return (\n    <div>\n      <nav>\n        <ul>\n          <li>\n            <Link to=\"/\">Comparison</Link>\n          </li>\n          <li>\n            <Link to=\"/cognitiveFunctions\">Cognitive functions</Link>\n          </li>\n        </ul>\n      </nav>\n    </div>\n  );\n};\n","import { CSSProperties } from 'react';\nimport { Personality } from '../../data/cognitive-funcion-data';\n\ninterface CognitiveFunctionDescriptionProps {\n  personality: Personality;\n}\n\nconst rowStyle: CSSProperties = {\n  borderRight: '1px solid black',\n};\n\nexport const CognitiveFunctionView = ({\n  personality,\n}: CognitiveFunctionDescriptionProps) => {\n  return (\n    <table\n      style={{\n        width: '100%',\n        borderBottom: '1px solid black',\n        borderTop: '2px solid black',\n        borderCollapse: 'collapse',\n      }}\n    >\n      <tr\n        style={{\n          borderBottom: '1px solid black',\n          borderCollapse: 'collapse',\n        }}\n      >\n        <td style={rowStyle}>{personality.hero}</td>\n        <td style={rowStyle}>{personality.parent}</td>\n        <td style={rowStyle}>{personality.child}</td>\n        <td\n          style={{\n            ...rowStyle,\n            borderRight: undefined,\n          }}\n        >\n          {personality.inferior}\n        </td>\n      </tr>\n      <tr>\n        <td style={rowStyle}>{personality.nemesis}</td>\n        <td style={rowStyle}>{personality.critic}</td>\n        <td style={rowStyle}>{personality.trickster}</td>\n        <td style={rowStyle}>{personality.demon}</td>\n      </tr>\n    </table>\n  );\n};\n","import { Dispatch, SetStateAction } from 'react';\nimport { Personality } from '../../data/cognitive-funcion-data';\n\ninterface CellProps {\n  personality: Personality;\n  activeTypeState: [\n    Personality | undefined,\n    Dispatch<SetStateAction<Personality | undefined>>\n  ];\n  selectedTypesState: [Personality[], Dispatch<SetStateAction<Personality[]>>];\n}\n\nexport const Cell = ({\n  personality,\n  activeTypeState,\n  selectedTypesState,\n}: CellProps) => {\n  const [activeType, setActiveType] = activeTypeState;\n  const [selectedTypes, setSelectedTypes] = selectedTypesState;\n  const isActive = activeType === personality;\n  const selected = selectedTypes.includes(personality);\n\n  const onClick = () => {\n    const contains = selectedTypes.includes(personality);\n\n    setSelectedTypes((prev) => {\n      if (contains) {\n        return prev.filter((t) => t !== personality);\n      }\n\n      // if (prev.length === 2) {\n      //   return prev;\n      // }\n\n      return [...prev, personality];\n    });\n  };\n  return (\n    <div\n      onMouseOver={() => setActiveType(personality)}\n      onMouseOut={() => setActiveType(undefined)}\n      onClick={onClick}\n      style={{\n        background: getPersonalityTypeColor(personality, selected, isActive),\n        width: '6rem',\n        height: '3rem',\n        border: '2px solid black',\n        borderRadius: '6px',\n        userSelect: 'none',\n      }}\n    >\n      <div\n        style={{\n          width: '6rem',\n          height: '3rem',\n          textAlign: 'center',\n          lineHeight: '3rem',\n          fontWeight: isActive ? 'bold' : 'initial',\n        }}\n      >\n        {personality.type}\n      </div>\n    </div>\n  );\n};\n\nexport function getPersonalityTypeColor(\n  personality: Personality,\n  selected: boolean,\n  isActive: boolean\n): string {\n  const type = personality.type;\n  const intuitive = type[1] === 'N';\n  const sensor = type[1] === 'S';\n  const thinker = type[2] === 'T';\n  const feeler = type[2] === 'F';\n  const judger = type[3] === 'J';\n  const perceiver = type[3] === 'P';\n\n  const analytic = intuitive && thinker;\n  if (analytic && selected) {\n    return 'violet';\n  }\n\n  const diplomat = intuitive && feeler;\n  if (diplomat && selected) {\n    return 'lightgreen';\n  }\n\n  const sentinel = sensor && judger;\n  if (sentinel && selected) {\n    return 'lightblue';\n  }\n\n  if (perceiver && selected) {\n    return 'yellow';\n  }\n\n  if (isActive) {\n    return 'lightgray';\n  }\n\n  return 'white';\n}\n","import { Personality } from '../../data/cognitive-funcion-data';\nimport { getPersonalityTypeColor } from './cell';\n\ninterface PersonalityDetailTitleProps {\n  personality: Personality;\n}\n\nexport const PersonalityDetailTitle = ({\n  personality,\n}: PersonalityDetailTitleProps) => {\n  return (\n    <div\n      style={{\n        background: getPersonalityTypeColor(personality, true, false),\n        lineHeight: '1.5rem',\n        fontWeight: 'bold',\n      }}\n    >\n      {personality.type}\n    </div>\n  );\n};\n","import {\n  CognitiveFunctionType,\n  Personality,\n} from '../../data/cognitive-funcion-data';\nimport {\n  CogntiveFunctionPosition,\n  getCognitiveFunctionData,\n} from '../../data/cognitive-function-roles';\nimport { CognitiveFunctionView } from './cognitive-function-view';\nimport { PersonalityDetailTitle } from './personality-detail-title';\n\ninterface PersonalityDetailProps {\n  personality: Personality;\n}\n\nexport const PersonalityDetail = ({ personality }: PersonalityDetailProps) => {\n  return (\n    <div\n      style={{\n        width: '15rem',\n        border: '2px solid black',\n        marginRight: '1rem',\n        paddingBottom: '0.5em',\n        textAlign: 'center',\n        borderRadius: '0.5rem',\n        overflow: 'hidden',\n      }}\n    >\n      <PersonalityDetailTitle personality={personality} />\n      <CognitiveFunctionView personality={personality} />\n      <CognitiveFunctionDescriptions personality={personality} />\n    </div>\n  );\n};\n\nconst CognitiveFunctionDescriptions = ({\n  personality,\n}: CognitiveFunctionDescriptionsProps) => {\n  const { hero, parent, child, inferior, nemesis, critic, trickster, demon } =\n    personality;\n\n  return (\n    <>\n      <SingleCognitiveFunction\n        cognitiveFunction={hero}\n        position={CogntiveFunctionPosition.hero}\n      />\n      <SingleCognitiveFunction\n        cognitiveFunction={parent}\n        position={CogntiveFunctionPosition.parent}\n      />\n      <SingleCognitiveFunction\n        cognitiveFunction={child}\n        position={CogntiveFunctionPosition.child}\n      />\n      <SingleCognitiveFunction\n        cognitiveFunction={inferior}\n        position={CogntiveFunctionPosition.inferior}\n      />\n      <SingleCognitiveFunction\n        cognitiveFunction={nemesis}\n        position={CogntiveFunctionPosition.nemesis}\n      />\n      <SingleCognitiveFunction\n        cognitiveFunction={critic}\n        position={CogntiveFunctionPosition.critic}\n      />\n      <SingleCognitiveFunction\n        cognitiveFunction={trickster}\n        position={CogntiveFunctionPosition.trickster}\n      />\n      <SingleCognitiveFunction\n        cognitiveFunction={demon}\n        position={CogntiveFunctionPosition.demon}\n      />\n    </>\n  );\n};\n\ninterface SingleCognitiveFunctionProps {\n  position: CogntiveFunctionPosition;\n  cognitiveFunction: CognitiveFunctionType;\n}\n\nconst SingleCognitiveFunction = ({\n  cognitiveFunction,\n  position,\n}: SingleCognitiveFunctionProps) => {\n  const data = getCognitiveFunctionData(cognitiveFunction);\n  if (!data) {\n    return (\n      <div\n        style={{\n          color: 'red',\n        }}\n      >\n        No Data Available\n      </div>\n    );\n  }\n  const traitsView = data.traits.map((t) => (\n    <div\n      style={{\n        textAlign: 'left',\n      }}\n    >\n      {`* ${t}`}\n    </div>\n  ));\n  return (\n    <>\n      <div\n        style={{\n          fontWeight: 'bold',\n          borderBottom: '1px solid black',\n          borderTop: '1px solid black',\n        }}\n      >\n        {cognitiveFunction}\n        <span\n          style={{\n            fontWeight: 'initial',\n          }}\n        >\n          {` (${position})`}\n        </span>\n      </div>\n      <div>{traitsView}</div>\n    </>\n  );\n};\n\ninterface CognitiveFunctionDescriptionsProps {\n  personality: Personality;\n}\n","import { Dispatch, SetStateAction } from 'react';\nimport { Personality } from '../../data/cognitive-funcion-data';\nimport { Cell } from './cell';\n\ninterface SegmentProps {\n  types: Personality[];\n  activeTypeState: [\n    Personality | undefined,\n    Dispatch<SetStateAction<Personality | undefined>>\n  ];\n  selectedTypesState: [Personality[], Dispatch<SetStateAction<Personality[]>>];\n}\nexport const Segment = ({\n  types,\n  activeTypeState,\n  selectedTypesState,\n}: SegmentProps) => {\n  const [type1, type2, type3, type4] = types;\n  return (\n    <table>\n      <tr>\n        <td>\n          <Cell\n            personality={type1}\n            activeTypeState={activeTypeState}\n            selectedTypesState={selectedTypesState}\n          />\n        </td>\n        <td>\n          <Cell\n            personality={type2}\n            activeTypeState={activeTypeState}\n            selectedTypesState={selectedTypesState}\n          />\n        </td>\n      </tr>\n      <tr>\n        <td>\n          <Cell\n            personality={type3}\n            activeTypeState={activeTypeState}\n            selectedTypesState={selectedTypesState}\n          />\n        </td>\n        <td>\n          <Cell\n            personality={type4}\n            activeTypeState={activeTypeState}\n            selectedTypesState={selectedTypesState}\n          />\n        </td>\n      </tr>\n    </table>\n  );\n};\n","import { CSSProperties, Dispatch, SetStateAction, useState } from 'react';\nimport {\n  enfj,\n  enfp,\n  entj,\n  entp,\n  esfj,\n  esfp,\n  estj,\n  estp,\n  infj,\n  infp,\n  intj,\n  intp,\n  isfj,\n  isfp,\n  istj,\n  istp,\n  Personality,\n} from '../../data/cognitive-funcion-data';\nimport { Segment } from './segment';\n\nconst titles: CSSProperties = {\n  textAlign: 'center',\n};\n\ninterface PersonalityTypeSelectorProps {\n  selectedTypesState: [Personality[], Dispatch<SetStateAction<Personality[]>>];\n}\n\nexport const PersonalityTypeSelector = ({\n  selectedTypesState,\n}: PersonalityTypeSelectorProps) => {\n  const inTypes = [intj, infj, intp, infp];\n  const isTypes = [istj, isfj, istp, isfp];\n  const enTypes = [entj, enfj, entp, enfp];\n  const esTypes = [estj, esfj, estp, esfp];\n\n  const activeTypeState = useState<Personality | undefined>();\n\n  return (\n    <table>\n      <tr>\n        <td />\n        <td>\n          <div style={titles}>Intuitives</div>\n        </td>\n        <td>\n          <div style={titles}>Sensors</div>\n        </td>\n      </tr>\n      <tr>\n        <td>Introverted</td>\n        <td>\n          <Segment\n            types={inTypes}\n            activeTypeState={activeTypeState}\n            selectedTypesState={selectedTypesState}\n          />\n        </td>\n        <td>\n          <Segment\n            types={isTypes}\n            activeTypeState={activeTypeState}\n            selectedTypesState={selectedTypesState}\n          />\n        </td>\n      </tr>\n      <tr>\n        <td>Extroverted</td>\n        <td>\n          <Segment\n            types={enTypes}\n            activeTypeState={activeTypeState}\n            selectedTypesState={selectedTypesState}\n          />\n        </td>\n        <td>\n          <Segment\n            types={esTypes}\n            activeTypeState={activeTypeState}\n            selectedTypesState={selectedTypesState}\n          />\n        </td>\n      </tr>\n    </table>\n  );\n};\n","import { useState } from 'react';\nimport { Personality } from '../../data/cognitive-funcion-data';\nimport { PersonalityDetail } from './personality-detail';\nimport { PersonalityTypeSelector } from './personality-type-selector';\n\nexport const ComparisonPage = () => {\n  const selectedTypesState = useState<Personality[]>([]);\n  const [selectedTypes] = selectedTypesState;\n\n  const detailComponents = selectedTypes.map((t) => {\n    return (\n      <td>\n        <PersonalityDetail personality={t} />\n      </td>\n    );\n  });\n\n  return (\n    <div>\n      <PersonalityTypeSelector selectedTypesState={selectedTypesState} />\n      <table>\n        <tr>{detailComponents}</tr>\n      </table>\n    </div>\n  );\n};\n","import React from 'react';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport { CognitiveFunctionPage } from './pages/cognitive-functions/cognitive-functions-page';\nimport { NavigationBar } from './navigation/navigation';\nimport { ComparisonPage } from './pages/comparison/comparison-page';\n\nfunction App() {\n  return (\n    <Router basename=\"/\">\n      <NavigationBar />\n      <Switch>\n        <Route exact path=\"/\">\n          <ComparisonPage />\n        </Route>\n        <Route path=\"/cognitiveFunctions\">\n          <CognitiveFunctionPage />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}