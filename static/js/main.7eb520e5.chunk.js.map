{"version":3,"sources":["pages/root/root-page.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CognitiveFunctionType","Ni","Si","Ti","Fi","Ne","Se","Te","Fe","introverts","type","hero","filter","p","startsWith","Introverts","types","map","style","width","RootPage","App","basename","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2IAaKA,E,yEAAAA,O,WAAAA,I,WAAAA,I,WAAAA,I,WAAAA,I,WAAAA,I,WAAAA,I,WAAAA,I,YAAAA,M,KAWL,IAAMC,EAAKD,EAAsBC,GAC3BC,EAAKF,EAAsBE,GAC3BC,EAAKH,EAAsBG,GAC3BC,EAAKJ,EAAsBI,GAE3BC,EAAKL,EAAsBK,GAC3BC,EAAKN,EAAsBM,GAC3BC,EAAKP,EAAsBO,GAC3BC,EAAKR,EAAsBQ,GA0B3BC,EAxB+B,CACnC,CAAEC,KAAM,OAAQC,KAAMJ,GACtB,CAAEG,KAAM,OAAQC,KAAMJ,GACtB,CAAEG,KAAM,OAAQC,KAAMH,GACtB,CAAEE,KAAM,OAAQC,KAAMH,GACtB,CAAEE,KAAM,OAAQC,KAAMN,GACtB,CAAEK,KAAM,OAAQC,KAAMN,GACtB,CAAEK,KAAM,OAAQC,KAAML,GACtB,CAAEI,KAAM,OAAQC,KAAML,GACtB,CAAEI,KAAM,OAAQC,KAAMV,GACtB,CAAES,KAAM,OAAQC,KAAMV,GACtB,CAAES,KAAM,OAAQC,KAAMT,GACtB,CAAEQ,KAAM,OAAQC,KAAMT,GACtB,CAAEQ,KAAM,OAAQC,KAAMR,GACtB,CAAEO,KAAM,OAAQC,KAAMR,GACtB,CAAEO,KAAM,OAAQC,KAAMP,GACtB,CAAEM,KAAM,OAAQC,KAAMP,IAQwBQ,QAAO,SAACC,GAAD,OACrDA,EAAEH,KAAKI,WAAW,QAGdC,EAAa,WACjB,IAAMC,EAAQP,EAAWQ,KAAI,SAACJ,GAAD,OAAO,6BAAKA,EAAEH,UAC3C,OACE,mCACE,uBAAOQ,MAAO,CAAEC,MAAO,QAAvB,SACE,6BAAKH,SAMAI,EAAW,WACtB,OACE,gCACE,6CACA,cAAC,EAAD,QC3DSC,MAdf,WACE,OACE,cAAC,IAAD,CAAQC,SAAS,IAAjB,SACE,8BACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,aCIGC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7eb520e5.chunk.js","sourcesContent":["import React from 'react';\ninterface Personality {\n  type: string;\n  hero: CognitiveFunctionType;\n  // parent: CognitiveFunctionType\n  // child: CognitiveFunctionType\n  // inferior: CognitiveFunctionType\n  // nemesis: CognitiveFunctionType\n  // critic: CognitiveFunctionType\n  // trickster: CognitiveFunctionType\n  // demon: CognitiveFunctionType\n}\n\nenum CognitiveFunctionType {\n  Ni,\n  Ne,\n  Ti,\n  Te,\n  Si,\n  Se,\n  Fi,\n  Fe,\n}\n\nconst Ni = CognitiveFunctionType.Ni;\nconst Si = CognitiveFunctionType.Si;\nconst Ti = CognitiveFunctionType.Ti;\nconst Fi = CognitiveFunctionType.Fi;\n\nconst Ne = CognitiveFunctionType.Ne;\nconst Se = CognitiveFunctionType.Se;\nconst Te = CognitiveFunctionType.Te;\nconst Fe = CognitiveFunctionType.Fe;\n\nconst personalities: Personality[] = [\n  { type: 'ENTJ', hero: Te },\n  { type: 'ESTJ', hero: Te },\n  { type: 'ENFJ', hero: Fe },\n  { type: 'ESFJ', hero: Fe },\n  { type: 'ENFP', hero: Ne },\n  { type: 'ENTP', hero: Ne },\n  { type: 'ESFP', hero: Se },\n  { type: 'ESTP', hero: Se },\n  { type: 'INFJ', hero: Ni },\n  { type: 'INTJ', hero: Ni },\n  { type: 'ISTJ', hero: Si },\n  { type: 'ISFJ', hero: Si },\n  { type: 'INTP', hero: Ti },\n  { type: 'ISTP', hero: Ti },\n  { type: 'INFP', hero: Fi },\n  { type: 'ISFP', hero: Fi },\n];\n\n//TODO: expose once needed\n\n// const extraverts: Personality[] = personalities.filter((p) =>\n//   p.type.startsWith('E')\n// );\nconst introverts: Personality[] = personalities.filter((p) =>\n  p.type.startsWith('I')\n);\n\nconst Introverts = (): JSX.Element => {\n  const types = introverts.map((p) => <td>{p.type}</td>);\n  return (\n    <>\n      <table style={{ width: '100%' }}>\n        <tr>{types}</tr>\n      </table>\n    </>\n  );\n};\n\nexport const RootPage = () => {\n  return (\n    <div>\n      <h4>Introverts:</h4>\n      <Introverts />\n    </div>\n  );\n};\n","import React from 'react';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport { RootPage } from './pages/root/root-page';\n\nfunction App() {\n  return (\n    <Router basename=\"/\">\n      <div>\n        <Switch>\n          <Route exact path=\"/\">\n            <RootPage />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}